;; Analyzed by ClojureScript 0.0-3291
{:use-macros nil, :excludes #{}, :name thi.ng.geom.core.intersect, :imports nil, :requires {g thi.ng.geom.core, thi.ng.geom.core thi.ng.geom.core, gu thi.ng.geom.core.utils, thi.ng.geom.core.utils thi.ng.geom.core.utils, v thi.ng.geom.core.vector, thi.ng.geom.core.vector thi.ng.geom.core.vector, m thi.ng.common.math.core, thi.ng.common.math.core thi.ng.common.math.core}, :uses {V2 thi.ng.geom.core.vector, vec3 thi.ng.geom.core.vector, V3 thi.ng.geom.core.vector, vec2 thi.ng.geom.core.vector, *eps* thi.ng.common.math.core}, :defs {face-b2? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 177, :column 8, :end-line 177, :end-column 16, :private true, :arglists (quote ([verts refv n])), :doc "Like face-b1?, but optimized for last face of tetrahedron."}, :private true, :name thi.ng.geom.core.intersect/face-b2?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 16, :method-params ([verts refv n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 3, :fn-var true, :arglists (quote ([verts refv n])), :doc "Like face-b1?, but optimized for last face of tetrahedron."}, intersect-aabb-aabb? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 39, :column 7, :end-line 39, :end-column 27, :arglists (quote ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb]), :arglists ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb]), :arglists-meta (nil nil)}}, :name thi.ng.geom.core.intersect/intersect-aabb-aabb?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb]), :arglists ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb]), :arglists-meta (nil nil)}, :method-params ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 4, :fn-var true, :arglists ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb])}, check-faces-b {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 234, :column 8, :end-line 234, :end-column 21, :private true, :arglists (quote ([deltas epoints verts p specs])), :doc "Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n    Returns true if tetras do intersect."}, :private true, :name thi.ng.geom.core.intersect/check-faces-b, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 21, :method-params ([deltas epoints verts p specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 5, :fn-var true, :arglists (quote ([deltas epoints verts p specs])), :doc "Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n    Returns true if tetras do intersect."}, intersect-plane-plane? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 140, :column 7, :end-line 140, :end-column 29, :arglists (quote ([an aw bn bw]))}, :name thi.ng.geom.core.intersect/intersect-plane-plane?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 29, :method-params ([an aw bn bw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 4, :fn-var true, :arglists (quote ([an aw bn bw]))}, sq {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 12, :column 8, :end-line 12, :end-column 10, :private true, :arglists (quote ([x]))}, :private true, :name thi.ng.geom.core.intersect/sq, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, intersect-aabb-sphere? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 46, :column 7, :end-line 46, :end-column 29, :arglists (quote ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r]), :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r]), :arglists-meta (nil nil)}}, :name thi.ng.geom.core.intersect/intersect-aabb-sphere?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r]), :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r]), :arglists-meta (nil nil)}, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 4, :fn-var true, :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r])}, intersect-circle-circle? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 14, :column 7, :end-line 14, :end-column 31, :arglists (quote ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2]), :arglists ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2]), :arglists-meta (nil nil)}}, :name thi.ng.geom.core.intersect/intersect-circle-circle?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 31, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2]), :arglists ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2]), :arglists-meta (nil nil)}, :method-params ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 4, :fn-var true, :arglists ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2])}, intersect-rect-rect? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 27, :column 7, :end-line 27, :end-column 27, :arglists (quote ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]), :arglists ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]), :arglists-meta (nil nil)}}, :name thi.ng.geom.core.intersect/intersect-rect-rect?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]), :arglists ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]), :arglists-meta (nil nil)}, :method-params ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 4, :fn-var true, :arglists ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]])}, get-edge {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 201, :column 8, :end-line 201, :end-column 16, :private true, :arglists (quote ([edges epoints id])), :doc "Lazy edge evaluation. Takes a vector of edges, vector of edge\n    points and an edge id. Looks up edge for given id and if not yet\n    present constructs it. Returns 2-elem vector of [edges edge]."}, :private true, :name thi.ng.geom.core.intersect/get-edge, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 16, :method-params ([edges epoints id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 3, :fn-var true, :arglists (quote ([edges epoints id])), :doc "Lazy edge evaluation. Takes a vector of edges, vector of edge\n    points and an edge id. Looks up edge for given id and if not yet\n    present constructs it. Returns 2-elem vector of [edges edge]."}, check-faces-a {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 212, :column 8, :end-line 212, :end-column 21, :private true, :arglists (quote ([deltas epoints verts p specs])), :doc "Takes the 4 delta vectors between the two tetras, edge definitions\n    of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n    and a seq of specs, each encoding a specific check (either calls to\n    face-a* or edge-a). Returns vector of bitmasks or nil if fail early."}, :private true, :name thi.ng.geom.core.intersect/check-faces-a, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 21, :method-params ([deltas epoints verts p specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 5, :fn-var true, :arglists (quote ([deltas epoints verts p specs])), :doc "Takes the 4 delta vectors between the two tetras, edge definitions\n    of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n    and a seq of specs, each encoding a specific check (either calls to\n    face-a* or edge-a). Returns vector of bitmasks or nil if fail early."}, edge-a {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 181, :column 8, :end-line 181, :end-column 14, :private true, :arglists (quote ([ma mb ea eb])), :doc "Takes 2 bitmasks and edge flags, returns true if there's a\n    separating plane between the faces shared by that edge."}, :private true, :name thi.ng.geom.core.intersect/edge-a, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 14, :method-params ([ma mb ea eb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ma mb ea eb])), :doc "Takes 2 bitmasks and edge flags, returns true if there's a\n    separating plane between the faces shared by that edge."}, intersect-ray-sphere? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 59, :column 7, :end-line 59, :end-column 28, :arglists (quote ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r]), :arglists ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r]), :arglists-meta (nil nil)}}, :name thi.ng.geom.core.intersect/intersect-ray-sphere?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r]), :arglists ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r]), :arglists-meta (nil nil)}, :method-params ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 4, :fn-var true, :arglists ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r])}, intersect-ray-triangle3? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 76, :column 7, :end-line 76, :end-column 31, :arglists (quote ([p d a b c]))}, :name thi.ng.geom.core.intersect/intersect-ray-triangle3?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 31, :method-params ([p d a b c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p d a b c]))}, intersect-ray-plane? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 148, :column 7, :end-line 148, :end-column 27, :arglists (quote ([rp dir n w]))}, :name thi.ng.geom.core.intersect/intersect-ray-plane?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 27, :method-params ([rp dir n w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rp dir n w]))}, intersect-ray2-edges? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 136, :column 7, :end-line 136, :end-column 28, :arglists (quote ([rp rd edges]))}, :name thi.ng.geom.core.intersect/intersect-ray2-edges?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 28, :method-params ([rp rd edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rp rd edges]))}, subdot {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 161, :column 8, :end-line 161, :end-column 14, :private true, :arglists (quote ([a b c])), :doc "Computes sum((a-b)*c), where a, b, c are 3D vectors."}, :private true, :name thi.ng.geom.core.intersect/subdot, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 14, :method-params ([a b c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a b c])), :doc "Computes sum((a-b)*c), where a, b, c are 3D vectors."}, intersect-tetrahedra? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 249, :column 7, :end-line 249, :end-column 28, :arglists (quote ([[pa pb pc pd :as p] [qa qb qc qd :as q]])), :doc "Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n    true if they intersect. Orientation of points is irrelevant (unlike\n    in the original algorithm this implementation is based on)."}, :name thi.ng.geom.core.intersect/intersect-tetrahedra?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 28, :method-params ([p__9992 p__9993]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[pa pb pc pd :as p] [qa qb qc qd :as q]])), :doc "Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n    true if they intersect. Orientation of points is irrelevant (unlike\n    in the original algorithm this implementation is based on)."}, intersect-sphere-sphere? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 54, :column 7, :end-line 54, :end-column 31, :arglists (quote ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2]), :arglists ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2]), :arglists-meta (nil nil)}}, :name thi.ng.geom.core.intersect/intersect-sphere-sphere?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 31, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2]), :arglists ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2]), :arglists-meta (nil nil)}, :method-params ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 4, :fn-var true, :arglists ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2])}, intersect-line2-line2? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 98, :column 7, :end-line 98, :end-column 29, :arglists (quote ([[px1 py1 :as p] [qx1 qy1 :as q] [px2 py2 :as lp] [qx2 qy2 :as lq]]))}, :name thi.ng.geom.core.intersect/intersect-line2-line2?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 29, :method-params ([p__9945 p__9946 p__9947 p__9948]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 4, :fn-var true, :arglists (quote ([[px1 py1 :as p] [qx1 qy1 :as q] [px2 py2 :as lp] [qx2 qy2 :as lq]]))}, intersect-plane-sphere? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 159, :column 7, :end-line 159, :end-column 30, :arglists (quote ([n w p r]))}, :name thi.ng.geom.core.intersect/intersect-plane-sphere?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 30, :method-params ([n w p r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 4, :fn-var true, :arglists (quote ([n w p r]))}, intersect-rect-circle? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 32, :column 7, :end-line 32, :end-column 29, :arglists (quote ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r]), :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r]), :arglists-meta (nil nil)}}, :name thi.ng.geom.core.intersect/intersect-rect-circle?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r]), :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r]), :arglists-meta (nil nil)}, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 4, :fn-var true, :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r])}, intersect-line2-edges? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 121, :column 7, :end-line 121, :end-column 29, :arglists (quote ([rp rq edges]))}, :name thi.ng.geom.core.intersect/intersect-line2-edges?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 29, :method-params ([rp rq edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rp rq edges]))}, face-b1? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 172, :column 8, :end-line 172, :end-column 16, :private true, :arglists (quote ([deltas n])), :doc "Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n    Returns true if all dot products are positive."}, :private true, :name thi.ng.geom.core.intersect/face-b1?, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 16, :method-params ([deltas n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 2, :fn-var true, :arglists (quote ([deltas n])), :doc "Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n    Returns true if all dot products are positive."}, face-a {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/core/intersect.cljs", :line 165, :column 8, :end-line 165, :end-column 14, :private true, :arglists (quote ([f deltas])), :doc "Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n    Returns 2-elem vec of [bitmask affine-coords]."}, :private true, :name thi.ng.geom.core.intersect/face-a, :variadic false, :file "out/thi/ng/geom/core/intersect.cljs", :end-column 14, :method-params ([f deltas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f deltas])), :doc "Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n    Returns 2-elem vec of [bitmask affine-coords]."}}, :require-macros {mm thi.ng.macromath.core, thi.ng.macromath.core thi.ng.macromath.core}, :cljs.analyzer/constants {:seen #{:q :intersect-outside :r :dir :parallel :ua :ub :type :e :size :on-plane :coincident-no-intersect :no-intersect :same-plane :intersect :f :f* :coincident :p :degenerate}, :order [:p :r :size :dir :type :degenerate :same-plane :no-intersect :intersect :q :coincident :coincident-no-intersect :parallel :ua :ub :intersect-outside :on-plane :f :f* :e]}, :doc nil}