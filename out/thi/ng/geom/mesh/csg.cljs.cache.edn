;; Analyzed by ClojureScript 0.0-3291
{:use-macros nil, :excludes #{}, :name thi.ng.geom.mesh.csg, :imports nil, :requires {bm thi.ng.geom.basicmesh, p thi.ng.geom.plane, thi.ng.geom.types.utils thi.ng.geom.types.utils, thi.ng.geom.core thi.ng.geom.core, v thi.ng.geom.core.vector, thi.ng.geom.core.vector thi.ng.geom.core.vector, thi.ng.geom.basicmesh thi.ng.geom.basicmesh, m thi.ng.common.math.core, thi.ng.common.data.core thi.ng.common.data.core, g thi.ng.geom.core, tu thi.ng.geom.types.utils, thi.ng.common.math.core thi.ng.common.math.core, thi.ng.geom.plane thi.ng.geom.plane, d thi.ng.common.data.core}, :uses {V3Y thi.ng.geom.core.vector, TWO_PI thi.ng.common.math.core, vec3 thi.ng.geom.core.vector, PI thi.ng.common.math.core, *eps* thi.ng.common.math.core, V3X thi.ng.geom.core.vector}, :defs {subtract {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 158, :column 7, :end-line 158, :end-column 15, :arglists (quote ([a b]))}, :name thi.ng.geom.mesh.csg/subtract, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 15, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, union {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 152, :column 7, :end-line 152, :end-column 12, :arglists (quote ([a b]))}, :name thi.ng.geom.mesh.csg/union, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 12, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, invert {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 109, :column 7, :end-line 109, :end-column 13, :arglists (quote ([{:keys [front back plane], :as node}]))}, :name thi.ng.geom.mesh.csg/invert, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 13, :method-params ([p__9838]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [front back plane], :as node}]))}, split-poly* {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 41, :column 7, :end-line 41, :end-column 18, :arglists (quote ([n w vertices types]))}, :name thi.ng.geom.mesh.csg/split-poly*, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 18, :method-params ([n w vertices types]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 4, :fn-var true, :arglists (quote ([n w vertices types]))}, csg-node {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 134, :column 7, :end-line 134, :end-column 15, :arglists (quote ([polygons] [{:keys [polygons plane front back], :as node} ps])), :doc "Creates a new or refines a CSG tree node and recursively\n  adds the given polygons to it.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([polygons] [{:keys [polygons plane front back], :as node} ps]), :arglists ([polygons] [{:keys [polygons plane front back], :as node} ps]), :arglists-meta (nil nil)}}, :name thi.ng.geom.mesh.csg/csg-node, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([polygons] [{:keys [polygons plane front back], :as node} ps]), :arglists ([polygons] [{:keys [polygons plane front back], :as node} ps]), :arglists-meta (nil nil)}, :method-params ([polygons] [{:keys [polygons plane front back], :as node} ps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 2, :fn-var true, :arglists ([polygons] [{:keys [polygons plane front back], :as node} ps]), :doc "Creates a new or refines a CSG tree node and recursively\n  adds the given polygons to it."}, ->CSGNode {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 17, :column 12, :end-line 17, :end-column 19, :internal-ctor true, :factory :positional, :arglists (quote ([plane polygons front back]))}, :name thi.ng.geom.mesh.csg/->CSGNode, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 19, :method-params ([plane polygons front back]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 17, :end-line 17, :max-fixed-arity 4, :fn-var true, :arglists (quote ([plane polygons front back]))}, clip {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 117, :column 7, :end-line 117, :end-column 11, :arglists (quote ([{:keys [front back], :as a} b])), :doc "Clips the polygons of the first node with the ones from the second.\n  Returns the updated node."}, :name thi.ng.geom.mesh.csg/clip, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 11, :method-params ([p__9841 b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [front back], :as a} b])), :doc "Clips the polygons of the first node with the ones from the second.\n  Returns the updated node."}, compute-split-types {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 31, :column 7, :end-line 31, :end-column 26, :arglists (quote ([n w vertices]))}, :name thi.ng.geom.mesh.csg/compute-split-types, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 26, :method-params ([n w vertices]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n w vertices]))}, all-polygons {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 101, :column 7, :end-line 101, :end-column 19, :arglists (quote ([{:keys [front back], :as node}])), :doc "Returns a lazy seq of all polygons of the given CSG node and its children."}, :name thi.ng.geom.mesh.csg/all-polygons, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 19, :method-params ([p__9835]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [front back], :as node}])), :doc "Returns a lazy seq of all polygons of the given CSG node and its children."}, clip-polygons {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 85, :column 7, :end-line 85, :end-column 20, :arglists (quote ([{:keys [plane front back], :as node} ps])), :doc "Uses a CSG node's plane to recursively clip the given seq of polygons.\n  Returns a flat seq of polygons classified as in-front of the plane\n  or the original seq if no clipping plane is available."}, :name thi.ng.geom.mesh.csg/clip-polygons, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 20, :method-params ([p__9830 ps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [plane front back], :as node} ps])), :doc "Uses a CSG node's plane to recursively clip the given seq of polygons.\n  Returns a flat seq of polygons classified as in-front of the plane\n  or the original seq if no clipping plane is available."}, CSGPolygon {:num-fields 4, :protocols #{thi.ng.geom.core/PBoundingSphere thi.ng.geom.core/PFlip}, :name thi.ng.geom.mesh.csg/CSGPolygon, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 20, :type true, :column 10, :line 19, :record false, :end-line 19, :skip-protocol-flag nil}, ->CSGPolygon {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 19, :column 10, :end-line 19, :end-column 20, :protocols #{thi.ng.geom.core/PBoundingSphere thi.ng.geom.core/PFlip}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([plane vertices shared bsphere]))}, :protocols #{thi.ng.geom.core/PBoundingSphere thi.ng.geom.core/PFlip}, :name thi.ng.geom.mesh.csg/->CSGPolygon, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 20, :method-params ([plane vertices shared bsphere]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 19, :end-line 19, :max-fixed-arity 4, :fn-var true, :arglists (quote ([plane vertices shared bsphere])), :skip-protocol-flag nil}, mesh->csg {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 172, :column 7, :end-line 172, :end-column 16, :arglists (quote ([m]))}, :name thi.ng.geom.mesh.csg/mesh->csg, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, CSGNode {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name thi.ng.geom.mesh.csg/CSGNode, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 17, :record true, :end-line 17, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, csg-cone {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 185, :column 7, :end-line 185, :end-column 15, :arglists (quote ([s e radius res] [s e r-south r-north res])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([s e radius res] [s e r-south r-north res]), :arglists ([s e radius res] [s e r-south r-north res]), :arglists-meta (nil nil)}}, :name thi.ng.geom.mesh.csg/csg-cone, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([s e radius res] [s e r-south r-north res]), :arglists ([s e radius res] [s e r-south r-north res]), :arglists-meta (nil nil)}, :method-params ([s e radius res] [s e r-south r-north res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 5, :fn-var true, :arglists ([s e radius res] [s e r-south r-north res])}, csg->mesh {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 178, :column 7, :end-line 178, :end-column 16, :arglists (quote ([node]))}, :name thi.ng.geom.mesh.csg/csg->mesh, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 16, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, split-poly {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 58, :column 7, :end-line 58, :end-column 17, :arglists (quote ([{:keys [n w]} poly state])), :doc "Takes a plane and splits the given polygon with it. Returns a 4-element vector\n    of classified sub-shapes: [coplanar-front coplanar-back front back]."}, :name thi.ng.geom.mesh.csg/split-poly, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 17, :method-params ([p__9820 poly state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [n w]} poly state])), :doc "Takes a plane and splits the given polygon with it. Returns a 4-element vector\n    of classified sub-shapes: [coplanar-front coplanar-back front back]."}, map->CSGNode {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 17, :column 12, :end-line 17, :end-column 19, :internal-ctor true, :factory :map, :arglists (quote ([G__9805]))}, :name thi.ng.geom.mesh.csg/map->CSGNode, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 19, :method-params ([G__9805]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9805]))}, csg-polygon {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 127, :column 7, :end-line 127, :end-column 18, :arglists (quote ([vertices] [vertices shared])), :doc "Creates a CSG polygon map from the given vertices and\n  computes a plane definition using the first 3 vertices.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([vertices] [vertices shared]), :arglists ([vertices] [vertices shared]), :arglists-meta (nil nil)}}, :name thi.ng.geom.mesh.csg/csg-polygon, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([vertices] [vertices shared]), :arglists ([vertices] [vertices shared]), :arglists-meta (nil nil)}, :method-params ([vertices] [vertices shared]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists ([vertices] [vertices shared]), :doc "Creates a CSG polygon map from the given vertices and\n  computes a plane definition using the first 3 vertices."}, intersect {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/thi/ng/geom/mesh/csg.cljs", :line 164, :column 7, :end-line 164, :end-column 16, :arglists (quote ([a b]))}, :name thi.ng.geom.mesh.csg/intersect, :variadic false, :file "out/thi/ng/geom/mesh/csg.cljs", :end-column 16, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}}, :require-macros {mm thi.ng.macromath.core, thi.ng.macromath.core thi.ng.macromath.core}, :cljs.analyzer/constants {:seen #{:r :front :default :plane :n :w :back :polygons :p}, :order [:plane :polygons :front :back :n :w :r :p :default]}, :doc nil}