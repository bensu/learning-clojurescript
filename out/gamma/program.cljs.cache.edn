;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{}, :name gamma.program, :imports nil, :requires {gamma.emit.tag gamma.emit.tag, gamma.emit.statement gamma.emit.statement, gamma.emit.operator gamma.emit.operator, fipp.engine fipp.engine, gamma.emit.emit gamma.emit.emit, gamma.api gamma.api, gamma.compiler.core gamma.compiler.core, g gamma.api, gamma.emit.construct gamma.emit.construct, emit gamma.emit.emit, gamma.emit.fun gamma.emit.fun}, :uses nil, :defs {ast {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/program.cljs", :line 12, :column 7, :end-line 12, :end-column 10, :arglists (quote ([inputs]))}, :name gamma.program/ast, :variadic false, :file "out/gamma/program.cljs", :end-column 10, :method-params ([inputs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([inputs]))}, precision-defaults {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/program.cljs", :line 19, :column 7, :end-line 19, :end-column 25, :arglists (quote ([p]))}, :name gamma.program/precision-defaults, :variadic false, :file "out/gamma/program.cljs", :end-column 25, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, glsl {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/program.cljs", :line 25, :column 7, :end-line 25, :end-column 11, :arglists (quote ([shader precision]))}, :name gamma.program/glsl, :variadic false, :file "out/gamma/program.cljs", :end-column 11, :method-params ([shader precision]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shader precision]))}, shader {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/program.cljs", :line 36, :column 7, :end-line 36, :end-column 13, :arglists (quote ([shader opts]))}, :name gamma.program/shader, :variadic false, :file "out/gamma/program.cljs", :end-column 13, :method-params ([shader opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shader opts]))}, program-inputs {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/program.cljs", :line 63, :column 7, :end-line 63, :end-column 21, :arglists (quote ([vs fs]))}, :name gamma.program/program-inputs, :variadic false, :file "out/gamma/program.cljs", :end-column 21, :method-params ([vs fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vs fs]))}, program {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/program.cljs", :line 69, :column 7, :end-line 69, :end-column 14, :arglists (quote ([x]))}, :name gamma.program/program, :variadic false, :file "out/gamma/program.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :require-macros {g gamma.api, gamma.api gamma.api}, :cljs.analyzer/constants {:seen #{:attribute :fragment-shader :glsl :locals :precision :width :ast :vertex-shader :inputs :varying :uniform :outputs :storage :tag :ir :program :shader}, :order [:ir :width :attribute :varying :uniform :storage :tag :inputs :outputs :locals :ast :shader :glsl :vertex-shader :fragment-shader :precision :program]}, :doc nil}