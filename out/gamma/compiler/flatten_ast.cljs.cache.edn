;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{}, :name gamma.compiler.flatten-ast, :imports nil, :requires {clojure.walk clojure.walk, gamma.ast gamma.ast}, :uses nil, :defs {flatten-ast {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/compiler/flatten_ast.cljs", :line 5, :column 7, :end-line 5, :end-column 18, :arglists (quote ([node] [db node parent-id])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([node] [db node parent-id]), :arglists ([node] [db node parent-id]), :arglists-meta (nil nil)}}, :name gamma.compiler.flatten-ast/flatten-ast, :variadic false, :file "out/gamma/compiler/flatten_ast.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([node] [db node parent-id]), :arglists ([node] [db node parent-id]), :arglists-meta (nil nil)}, :method-params ([node] [db node parent-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 3, :fn-var true, :arglists ([node] [db node parent-id])}, ->tree {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/compiler/flatten_ast.cljs", :line 28, :column 7, :end-line 28, :end-column 13, :arglists (quote ([db id]))}, :name gamma.compiler.flatten-ast/->tree, :variadic false, :file "out/gamma/compiler/flatten_ast.cljs", :end-column 13, :method-params ([db id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db id]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:block :head :root :id :literal :parents :body}, :order [:block :head :root :id :body :parents :literal]}, :doc nil}