;; Analyzed by ClojureScript 0.0-3291
{:use-macros nil, :excludes #{}, :name gamma.emit.emit, :imports nil, :requires {gamma.ast gamma.ast}, :uses {body gamma.ast, term gamma.ast, head gamma.ast}, :defs {function? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/emit/emit.cljs", :line 5, :column 7, :end-line 5, :end-column 16, :arglists (quote ([x]))}, :name gamma.emit.emit/function?, :variadic false, :file "out/gamma/emit/emit.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, operator-class {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/emit/emit.cljs", :line 8, :column 7, :end-line 8, :end-column 21, :arglists (quote ([x]))}, :name gamma.emit.emit/operator-class, :variadic false, :file "out/gamma/emit/emit.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, primitive? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/emit/emit.cljs", :line 12, :column 7, :end-line 12, :end-column 17, :arglists (quote ([x]))}, :name gamma.emit.emit/primitive?, :variadic false, :file "out/gamma/emit/emit.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, constructor? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/emit/emit.cljs", :line 15, :column 7, :end-line 15, :end-column 19, :arglists (quote ([x]))}, :name gamma.emit.emit/constructor?, :variadic false, :file "out/gamma/emit/emit.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, emit-dispatch {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/emit/emit.cljs", :line 19, :column 7, :end-line 19, :end-column 20, :arglists (quote ([db x]))}, :name gamma.emit.emit/emit-dispatch, :variadic false, :file "out/gamma/emit/emit.cljs", :end-column 20, :method-params ([db x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db x]))}, emit {:name gamma.emit.emit/emit, :file "out/gamma/emit/emit.cljs", :line 36, :column 1, :end-line 36, :end-column 15, :meta {:file "/Users/james/projects/cljs-draw/out/gamma/emit/emit.cljs", :line 36, :column 11, :end-line 36, :end-column 15}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:bvec3 :int :mat3 :default :vec3 :float :ivec4 :value :mat2 :ivec2 :vec4 :function :primitive :vec2 :bvec2 :head :class :nil :constructor :literal :mat4 :bvec4 :tag :bool :hierarchy :ivec3 :primitive-type}, :order [:class :bvec3 :mat3 :vec3 :ivec4 :mat2 :ivec2 :vec4 :vec2 :bvec2 :mat4 :bvec4 :ivec3 :head :primitive :int :float :bool :primitive-type :constructor :function :tag :hierarchy :default :literal :value :nil]}, :doc nil}