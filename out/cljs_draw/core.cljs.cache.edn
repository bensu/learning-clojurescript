;; Analyzed by ClojureScript 0.0-3126
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name cljs_draw.core, :imports nil, :requires {cljs_draw.util cljs_draw.util, cljs.core.async cljs.core.async, dom goog.dom, goog.dom goog.dom, clojure.browser.repl clojure.browser.repl, repl clojure.browser.repl}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, listen cljs_draw.util, put! cljs.core.async}, :defs {render {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 13, :end-line 21, :column 7, :line 21, :file "/Users/james/projects/cljs-draw/01-pressure-draw/cljs_draw/core.cljs"}, :name cljs_draw.core/render, :variadic false, :file "01-pressure-draw/cljs_draw/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 21, :end-line 21, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, points {:meta {:end-column 12, :end-line 19, :column 6, :line 19, :file "/Users/james/projects/cljs-draw/01-pressure-draw/cljs_draw/core.cljs"}, :file "01-pressure-draw/cljs_draw/core.cljs", :line 19, :column 1, :end-line 19, :end-column 12, :test true, :name cljs_draw.core/points}, ctx {:meta {:end-column 9, :end-line 12, :column 6, :line 12, :file "/Users/james/projects/cljs-draw/01-pressure-draw/cljs_draw/core.cljs"}, :file "01-pressure-draw/cljs_draw/core.cljs", :line 12, :column 1, :end-line 12, :end-column 9, :test true, :name cljs_draw.core/ctx}, canvas {:meta {:end-column 12, :end-line 11, :column 6, :line 11, :file "/Users/james/projects/cljs-draw/01-pressure-draw/cljs_draw/core.cljs"}, :file "01-pressure-draw/cljs_draw/core.cljs", :line 11, :column 1, :end-line 11, :end-column 12, :test true, :name cljs_draw.core/canvas}, conn {:meta {:end-column 14, :end-line 8, :column 10, :line 8, :file "/Users/james/projects/cljs-draw/01-pressure-draw/cljs_draw/core.cljs"}, :file "01-pressure-draw/cljs_draw/core.cljs", :line 8, :column 1, :end-line 8, :end-column 14, :test true, :name cljs_draw.core/conn}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:pressure :x :y :recur :else], :seen #{:y :pressure :else :recur :x}}, :doc nil}