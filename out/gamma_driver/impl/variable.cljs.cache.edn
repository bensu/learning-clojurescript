;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{}, :name gamma-driver.impl.variable, :imports nil, :requires {ggl goog.webgl, goog.webgl goog.webgl}, :uses nil, :defs {attribute-location {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/impl/variable.cljs", :line 6, :column 7, :end-line 6, :end-column 25, :arglists (quote ([gl program attribute]))}, :name gamma-driver.impl.variable/attribute-location, :variadic false, :file "out/gamma_driver/impl/variable.cljs", :end-column 25, :method-params ([gl program attribute]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists (quote ([gl program attribute]))}, default-layout {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/impl/variable.cljs", :line 10, :column 7, :end-line 10, :end-column 21, :arglists (quote ([attribute]))}, :name gamma-driver.impl.variable/default-layout, :variadic false, :file "out/gamma_driver/impl/variable.cljs", :end-column 21, :method-params ([attribute]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attribute]))}, bind-attribute {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/impl/variable.cljs", :line 20, :column 7, :end-line 20, :end-column 21, :arglists (quote ([gl program attribute input]))}, :name gamma-driver.impl.variable/bind-attribute, :variadic false, :file "out/gamma_driver/impl/variable.cljs", :end-column 21, :method-params ([gl program attribute input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 4, :fn-var true, :arglists (quote ([gl program attribute input]))}, element-index-input {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/impl/variable.cljs", :line 35, :column 7, :end-line 35, :end-column 26, :arglists (quote ([gl program indices input]))}, :name gamma-driver.impl.variable/element-index-input, :variadic false, :file "out/gamma_driver/impl/variable.cljs", :end-column 26, :method-params ([gl program indices input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 4, :fn-var true, :arglists (quote ([gl program indices input]))}, uniform-location {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/impl/variable.cljs", :line 39, :column 7, :end-line 39, :end-column 23, :arglists (quote ([gl program uniform]))}, :name gamma-driver.impl.variable/uniform-location, :variadic false, :file "out/gamma_driver/impl/variable.cljs", :end-column 23, :method-params ([gl program uniform]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 3, :fn-var true, :arglists (quote ([gl program uniform]))}, bind-uniform {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/impl/variable.cljs", :line 43, :column 7, :end-line 43, :end-column 19, :arglists (quote ([gl program uniform input]))}, :name gamma-driver.impl.variable/bind-uniform, :variadic false, :file "out/gamma_driver/impl/variable.cljs", :end-column 19, :method-params ([gl program uniform input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 4, :fn-var true, :arglists (quote ([gl program uniform input]))}, bind-texture-uniform {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/impl/variable.cljs", :line 68, :column 7, :end-line 68, :end-column 27, :arglists (quote ([gl program uniform texture]))}, :name gamma-driver.impl.variable/bind-texture-uniform, :variadic false, :file "out/gamma_driver/impl/variable.cljs", :end-column 27, :method-params ([gl program uniform texture]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 4, :fn-var true, :arglists (quote ([gl program uniform texture]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:offset :layout :vec3 :float :texture-id :name :type :vec4 :size :vec2 :normalized? :element-array-buffer :array-buffer :program :stride :texture :data}, :order [:program :name :normalized? :size :type :offset :stride :float :vec2 :vec3 :vec4 :layout :array-buffer :element-array-buffer :data :texture-id :texture]}, :doc nil}