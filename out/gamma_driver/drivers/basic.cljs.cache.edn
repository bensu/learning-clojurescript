;; Analyzed by ClojureScript 0.0-3291
{:use-macros nil, :excludes #{}, :name gamma-driver.drivers.basic, :imports nil, :requires {gd gamma-driver.api, gamma-driver.api gamma-driver.api, gdp gamma-driver.protocols, gamma-driver.protocols gamma-driver.protocols}, :uses nil, :defs {draw-count {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/drivers/basic.cljs", :line 54, :column 7, :end-line 54, :end-column 17, :arglists (quote ([driver program]))}, :name gamma-driver.drivers.basic/draw-count, :variadic false, :file "out/gamma_driver/drivers/basic.cljs", :end-column 17, :method-params ([driver program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([driver program]))}, input-complete? {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/drivers/basic.cljs", :line 47, :column 7, :end-line 47, :end-column 22, :arglists (quote ([driver program]))}, :name gamma-driver.drivers.basic/input-complete?, :variadic false, :file "out/gamma_driver/drivers/basic.cljs", :end-column 22, :method-params ([driver program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([driver program]))}, basic-driver {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/drivers/basic.cljs", :line 146, :column 7, :end-line 146, :end-column 19, :arglists (quote ([gl]))}, :name gamma-driver.drivers.basic/basic-driver, :variadic false, :file "out/gamma_driver/drivers/basic.cljs", :end-column 19, :method-params ([gl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gl]))}, ->BasicDriver {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/drivers/basic.cljs", :line 100, :column 12, :end-line 100, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([gl resource-state mapping-fn input-state input-fn]))}, :name gamma-driver.drivers.basic/->BasicDriver, :variadic false, :file "out/gamma_driver/drivers/basic.cljs", :end-column 23, :method-params ([gl resource-state mapping-fn input-state input-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 100, :end-line 100, :max-fixed-arity 5, :fn-var true, :arglists (quote ([gl resource-state mapping-fn input-state input-fn]))}, default-input-fn {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/drivers/basic.cljs", :line 31, :column 7, :end-line 31, :end-column 23, :arglists (quote ([driver program input-binder variable spec]))}, :name gamma-driver.drivers.basic/default-input-fn, :variadic false, :file "out/gamma_driver/drivers/basic.cljs", :end-column 23, :method-params ([driver program input-binder variable spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 5, :fn-var true, :arglists (quote ([driver program input-binder variable spec]))}, produce {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/drivers/basic.cljs", :line 11, :column 7, :end-line 11, :end-column 14, :arglists (quote ([driver constructor-fn spec]))}, :name gamma-driver.drivers.basic/produce, :variadic false, :file "out/gamma_driver/drivers/basic.cljs", :end-column 14, :method-params ([driver constructor-fn spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([driver constructor-fn spec]))}, draw-arrays* {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/drivers/basic.cljs", :line 63, :column 7, :end-line 63, :end-column 19, :arglists (quote ([driver program opts] [driver program opts target])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([driver program opts] [driver program opts target]), :arglists ([driver program opts] [driver program opts target]), :arglists-meta (nil nil)}}, :name gamma-driver.drivers.basic/draw-arrays*, :variadic false, :file "out/gamma_driver/drivers/basic.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([driver program opts] [driver program opts target]), :arglists ([driver program opts] [driver program opts target]), :arglists-meta (nil nil)}, :method-params ([driver program opts] [driver program opts target]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 4, :fn-var true, :arglists ([driver program opts] [driver program opts target])}, draw-elements* {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/drivers/basic.cljs", :line 79, :column 7, :end-line 79, :end-column 21, :arglists (quote ([driver program opts] [driver program opts target])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([driver program opts] [driver program opts target]), :arglists ([driver program opts] [driver program opts target]), :arglists-meta (nil nil)}}, :name gamma-driver.drivers.basic/draw-elements*, :variadic false, :file "out/gamma_driver/drivers/basic.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([driver program opts] [driver program opts target]), :arglists ([driver program opts] [driver program opts target]), :arglists-meta (nil nil)}, :method-params ([driver program opts] [driver program opts target]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 4, :fn-var true, :arglists ([driver program opts] [driver program opts target])}, BasicDriver {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta gamma-driver.protocols/IDraw cljs.core/ICloneable gamma-driver.protocols/IResource gamma-driver.protocols/IContext cljs.core/IPrintWithWriter gamma-driver.protocols/IBindVariable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name gamma-driver.drivers.basic/BasicDriver, :file "out/gamma_driver/drivers/basic.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 100, :record true, :end-line 100, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, program-inputs-state {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/drivers/basic.cljs", :line 42, :column 7, :end-line 42, :end-column 27, :arglists (quote ([driver program]))}, :name gamma-driver.drivers.basic/program-inputs-state, :variadic false, :file "out/gamma_driver/drivers/basic.cljs", :end-column 27, :method-params ([driver program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([driver program]))}, map->BasicDriver {:protocol-inline nil, :meta {:file "/Users/james/projects/cljs-draw/out/gamma_driver/drivers/basic.cljs", :line 100, :column 12, :end-line 100, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__19355]))}, :name gamma-driver.drivers.basic/map->BasicDriver, :variadic false, :file "out/gamma_driver/drivers/basic.cljs", :end-column 23, :method-params ([G__19355]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19355]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:attribute :element :input-state :mapping-fn :inputs :id :count :draw-mode :gl :unsigned-short :storage :resource-state :first :index-type :input-fn :triangles}, :order [:gl :resource-state :mapping-fn :input-state :inputs :attribute :storage :count :draw-mode :first :triangles :index-type :unsigned-short :input-fn :id :element]}, :doc nil}